{"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator"]}],"abstract":[{"isActive":true,"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","type":"reference"},{"type":"text","text":" to calculate the 2*n term."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerTwoNIterator"}],"languages":["swift"]}]}],"metadata":{"modules":[{"name":"BigDecimal"}],"title":"PowerTwoNIterator","externalID":"s:10BigDecimal17PowerTwoNIteratorV","roleHeading":"Structure","symbolKind":"struct","navigatorTitle":[{"text":"PowerTwoNIterator","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PowerTwoNIterator"}],"role":"symbol"},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/bigdecimal\/powertwoniterator"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator\/calculateNextPower()","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator\/getCurrentPower()"],"generated":true,"anchor":"Instance-Methods"}],"references":{"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNIterator/calculateNextPower()":{"abstract":[{"type":"text","text":"Calculates the next power."}],"title":"calculateNextPower()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"calculateNextPower"},{"kind":"text","text":"()"}],"kind":"symbol","url":"\/documentation\/bigdecimal\/powertwoniterator\/calculatenextpower()","role":"symbol","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator\/calculateNextPower()","type":"topic"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNIterator":{"url":"\/documentation\/bigdecimal\/powertwoniterator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PowerTwoNIterator","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"PowerTwoNIterator","kind":"identifier"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","abstract":[{"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","isActive":true,"type":"reference"},{"text":" to calculate the 2*n term.","type":"text"}],"type":"topic","title":"PowerTwoNIterator","kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNIterator/getCurrentPower()":{"role":"symbol","kind":"symbol","url":"\/documentation\/bigdecimal\/powertwoniterator\/getcurrentpower()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getCurrentPower","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"BigDecimal","preciseIdentifier":"s:10BigDecimalAAV","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator\/getCurrentPower()","abstract":[{"text":"Returns the current power.","type":"text"}],"title":"getCurrentPower()"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PowerIterator","kind":"identifier"}],"title":"PowerIterator","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"PowerIterator"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","url":"\/documentation\/bigdecimal\/poweriterator","role":"symbol","type":"topic","kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal":{"abstract":[{"text":"The BigDecimal package provides arbitrary-precision (with an adjustable upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"limit for performance) and fixed-precision decimal arithmetic in Swift."}],"title":"BigDecimal","type":"topic","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal","url":"\/documentation\/bigdecimal","role":"collection","kind":"symbol"}}}