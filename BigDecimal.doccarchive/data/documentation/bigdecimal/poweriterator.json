{"variants":[{"paths":["\/documentation\/bigdecimal\/poweriterator"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"BigDecimal"}],"symbolKind":"protocol","externalID":"s:10BigDecimal13PowerIteratorP","role":"symbol","navigatorTitle":[{"text":"PowerIterator","kind":"identifier"}],"roleHeading":"Protocol","title":"PowerIterator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PowerIterator","kind":"identifier"}]},"identifier":{"url":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PowerIterator"}],"languages":["swift"],"platforms":["macOS"]}]}],"relationshipsSections":[{"identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerNIterator","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNPlusOneIterator"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"topicSections":[{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/calculateNextPower()","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/getCurrentPower()"],"anchor":"Instance-Methods"}],"hierarchy":{"paths":[["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","references":{"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerNIterator":{"url":"\/documentation\/bigdecimal\/powerniterator","title":"PowerNIterator","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerNIterator"}],"navigatorTitle":[{"text":"PowerNIterator","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerNIterator","kind":"symbol","role":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator/calculateNextPower()":{"type":"topic","title":"calculateNextPower()","required":true,"role":"symbol","abstract":[{"text":"Calculates the next power.","type":"text"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/calculateNextPower()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"calculateNextPower"},{"kind":"text","text":"()"}],"url":"\/documentation\/bigdecimal\/poweriterator\/calculatenextpower()"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator/getCurrentPower()":{"type":"topic","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/getCurrentPower()","abstract":[{"text":"Returns the current power.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getCurrentPower"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"BigDecimal","preciseIdentifier":"s:10BigDecimalAAV"}],"required":true,"title":"getCurrentPower()","url":"\/documentation\/bigdecimal\/poweriterator\/getcurrentpower()"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNIterator":{"url":"\/documentation\/bigdecimal\/powertwoniterator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PowerTwoNIterator","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"PowerTwoNIterator","kind":"identifier"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","abstract":[{"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","isActive":true,"type":"reference"},{"text":" to calculate the 2*n term.","type":"text"}],"type":"topic","title":"PowerTwoNIterator","kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PowerIterator","kind":"identifier"}],"title":"PowerIterator","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"PowerIterator"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","url":"\/documentation\/bigdecimal\/poweriterator","role":"symbol","type":"topic","kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNPlusOneIterator":{"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNPlusOneIterator","type":"topic","url":"\/documentation\/bigdecimal\/powertwonplusoneiterator","navigatorTitle":[{"text":"PowerTwoNPlusOneIterator","kind":"identifier"}],"abstract":[{"type":"reference","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","isActive":true},{"text":" to calculate the 2*n+1 term.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerTwoNPlusOneIterator"}],"role":"symbol","kind":"symbol","title":"PowerTwoNPlusOneIterator"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal":{"abstract":[{"text":"The BigDecimal package provides arbitrary-precision (with an adjustable upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"limit for performance) and fixed-precision decimal arithmetic in Swift."}],"title":"BigDecimal","type":"topic","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal","url":"\/documentation\/bigdecimal","role":"collection","kind":"symbol"}}}