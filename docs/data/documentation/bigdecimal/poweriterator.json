{"metadata":{"symbolKind":"protocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerIterator"}],"externalID":"s:10BigDecimal13PowerIteratorP","title":"PowerIterator","roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"PowerIterator"}],"modules":[{"name":"BigDecimal"}]},"hierarchy":{"paths":[["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/calculateNextPower()","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/getCurrentPower()"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigdecimal\/poweriterator"]}],"sections":[],"identifier":{"url":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerNIterator","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNPlusOneIterator"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerIterator"}],"platforms":["macOS"]}]}],"references":{"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator":{"navigatorTitle":[{"text":"PowerIterator","kind":"identifier"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","url":"\/documentation\/bigdecimal\/poweriterator","role":"symbol","title":"PowerIterator","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PowerIterator","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator/getCurrentPower()":{"abstract":[{"type":"text","text":"Returns the current power."}],"title":"getCurrentPower()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"getCurrentPower","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:10BigDecimalAAV","text":"BigDecimal","kind":"typeIdentifier"}],"required":true,"role":"symbol","type":"topic","url":"\/documentation\/bigdecimal\/poweriterator\/getcurrentpower()","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/getCurrentPower()","kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerNIterator":{"navigatorTitle":[{"text":"PowerNIterator","kind":"identifier"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerNIterator","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PowerNIterator","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/bigdecimal\/powerniterator","type":"topic","title":"PowerNIterator"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNPlusOneIterator":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"PowerTwoNPlusOneIterator"}],"abstract":[{"type":"reference","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","isActive":true},{"text":" to calculate the 2*n+1 term.","type":"text"}],"kind":"symbol","url":"\/documentation\/bigdecimal\/powertwonplusoneiterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerTwoNPlusOneIterator"}],"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNPlusOneIterator","role":"symbol","title":"PowerTwoNPlusOneIterator"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerTwoNIterator":{"type":"topic","title":"PowerTwoNIterator","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerTwoNIterator","url":"\/documentation\/bigdecimal\/powertwoniterator","abstract":[{"identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator","type":"reference","isActive":true},{"text":" to calculate the 2*n term.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"PowerTwoNIterator","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PowerTwoNIterator"}],"kind":"symbol"},"doc://bigdecimal.BigDecimal/documentation/BigDecimal/PowerIterator/calculateNextPower()":{"required":true,"kind":"symbol","role":"symbol","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal\/PowerIterator\/calculateNextPower()","title":"calculateNextPower()","type":"topic","abstract":[{"type":"text","text":"Calculates the next power."}],"url":"\/documentation\/bigdecimal\/poweriterator\/calculatenextpower()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"calculateNextPower","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://bigdecimal.BigDecimal/documentation/BigDecimal":{"url":"\/documentation\/bigdecimal","type":"topic","abstract":[{"text":"The BigDecimal package provides arbitrary-precision (with an adjustable upper","type":"text"},{"type":"text","text":" "},{"type":"text","text":"limit for performance) and fixed-precision decimal arithmetic in Swift."}],"title":"BigDecimal","identifier":"doc:\/\/bigdecimal.BigDecimal\/documentation\/BigDecimal","kind":"symbol","role":"collection"}}}